"use strict";
/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationApiGenerated = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
const AuthenticationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
         * @summary Delete user
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSnapTradeUser: (userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('deleteSnapTradeUser', 'userId', userId);
            const localVarPath = `/snapTrade/deleteUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/deleteUser',
                httpMethod: 'DELETE'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSnapTradeUsers: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/snapTrade/listUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/listUsers',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
         * @summary Generate Connection Portal URL
         * @param {string} userId
         * @param {string} userSecret
         * @param {SnapTradeLoginUserRequestBody} [snapTradeLoginUserRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginSnapTradeUser: (userId, userSecret, snapTradeLoginUserRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('loginSnapTradeUser', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('loginSnapTradeUser', 'userSecret', userSecret);
            const localVarPath = `/snapTrade/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: snapTradeLoginUserRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/login',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(snapTradeLoginUserRequestBody, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
         * @summary Register user
         * @param {SnapTradeRegisterUserRequestBody} snapTradeRegisterUserRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSnapTradeUser: (snapTradeRegisterUserRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'snapTradeRegisterUserRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('registerSnapTradeUser', 'snapTradeRegisterUserRequestBody', snapTradeRegisterUserRequestBody);
            const localVarPath = `/snapTrade/registerUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: snapTradeRegisterUserRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/registerUser',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(snapTradeRegisterUserRequestBody, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
         * @summary Rotate user secret
         * @param {UserIDandSecret} userIDandSecret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSnapTradeUserSecret: (userIDandSecret, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userIDandSecret' is not null or undefined
            (0, common_1.assertParamExists)('resetSnapTradeUserSecret', 'userIDandSecret', userIDandSecret);
            const localVarPath = `/snapTrade/resetUserSecret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: userIDandSecret,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/resetUserSecret',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userIDandSecret, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthenticationApiAxiosParamCreator = AuthenticationApiAxiosParamCreator;
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
const AuthenticationApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthenticationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
         * @summary Delete user
         * @param {AuthenticationApiDeleteSnapTradeUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSnapTradeUser(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSnapTradeUser(requestParameters.userId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSnapTradeUsers(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSnapTradeUsers(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
         * @summary Generate Connection Portal URL
         * @param {AuthenticationApiLoginSnapTradeUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginSnapTradeUser(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const snapTradeLoginUserRequestBody = {
                    broker: requestParameters.broker,
                    immediateRedirect: requestParameters.immediateRedirect,
                    customRedirect: requestParameters.customRedirect,
                    reconnect: requestParameters.reconnect,
                    connectionType: requestParameters.connectionType,
                    connectionPortalVersion: requestParameters.connectionPortalVersion
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginSnapTradeUser(requestParameters.userId, requestParameters.userSecret, snapTradeLoginUserRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
         * @summary Register user
         * @param {AuthenticationApiRegisterSnapTradeUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSnapTradeUser(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const snapTradeRegisterUserRequestBody = {
                    userId: requestParameters.userId
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.registerSnapTradeUser(snapTradeRegisterUserRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
         * @summary Rotate user secret
         * @param {AuthenticationApiResetSnapTradeUserSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSnapTradeUserSecret(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const userIDandSecret = {
                    userId: requestParameters.userId,
                    userSecret: requestParameters.userSecret
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetSnapTradeUserSecret(userIDandSecret, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthenticationApiFp = AuthenticationApiFp;
/**
 * AuthenticationApi - factory interface
 * @export
 */
const AuthenticationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthenticationApiFp)(configuration);
    return {
        /**
         * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
         * @summary Delete user
         * @param {AuthenticationApiDeleteSnapTradeUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSnapTradeUser(requestParameters, options) {
            return localVarFp.deleteSnapTradeUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSnapTradeUsers(options) {
            return localVarFp.listSnapTradeUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
         * @summary Generate Connection Portal URL
         * @param {AuthenticationApiLoginSnapTradeUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginSnapTradeUser(requestParameters, options) {
            return localVarFp.loginSnapTradeUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
         * @summary Register user
         * @param {AuthenticationApiRegisterSnapTradeUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSnapTradeUser(requestParameters, options) {
            return localVarFp.registerSnapTradeUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
         * @summary Rotate user secret
         * @param {AuthenticationApiResetSnapTradeUserSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSnapTradeUserSecret(requestParameters, options) {
            return localVarFp.resetSnapTradeUserSecret(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthenticationApiFactory = AuthenticationApiFactory;
/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
class AuthenticationApiGenerated extends base_1.BaseAPI {
    /**
     * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
     * @summary Delete user
     * @param {AuthenticationApiDeleteSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    deleteSnapTradeUser(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).deleteSnapTradeUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    listSnapTradeUsers(options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).listSnapTradeUsers(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
     * @summary Generate Connection Portal URL
     * @param {AuthenticationApiLoginSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    loginSnapTradeUser(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).loginSnapTradeUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
     * @summary Register user
     * @param {AuthenticationApiRegisterSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    registerSnapTradeUser(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).registerSnapTradeUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
     * @summary Rotate user secret
     * @param {AuthenticationApiResetSnapTradeUserSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    resetSnapTradeUserSecret(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).resetSnapTradeUserSecret(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthenticationApiGenerated = AuthenticationApiGenerated;
