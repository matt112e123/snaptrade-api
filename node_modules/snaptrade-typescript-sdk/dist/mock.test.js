"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const index_1 = require("./index");
describe("trailing slash is stripped", () => {
    it("should make a GET request to the correct URL", () => __awaiter(void 0, void 0, void 0, function* () {
        const mockGet = jest.fn().mockResolvedValueOnce({ data: {} });
        axios_1.default.request = mockGet;
        // Call your function
        yield new index_1.Snaptrade({
            consumerKey: process.env.SNAPTRADE_CONSUMER_KEY,
            clientId: process.env.SNAPTRADE_CLIENT_ID,
            basePath: "http://localhost:3000/api/proxy",
        }).apiStatus.check();
        // Assert that axios.get was called with the correct URL
        expect(axios_1.default.request).toHaveBeenCalledWith(expect.objectContaining({
            url: expect.stringContaining("http://localhost:3000/api/proxy?"),
        }));
    }));
});
