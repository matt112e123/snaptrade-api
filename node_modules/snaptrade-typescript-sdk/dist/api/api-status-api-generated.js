"use strict";
/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiStatusApiGenerated = exports.ApiStatusApiFactory = exports.ApiStatusApiFp = exports.ApiStatusApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * ApiStatusApi - axios parameter creator
 * @export
 */
const ApiStatusApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Check whether the API is operational and verify timestamps.
         * @summary Get API Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ApiStatusApiAxiosParamCreator = ApiStatusApiAxiosParamCreator;
/**
 * ApiStatusApi - functional programming interface
 * @export
 */
const ApiStatusApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ApiStatusApiAxiosParamCreator)(configuration);
    return {
        /**
         * Check whether the API is operational and verify timestamps.
         * @summary Get API Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.check(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ApiStatusApiFp = ApiStatusApiFp;
/**
 * ApiStatusApi - factory interface
 * @export
 */
const ApiStatusApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ApiStatusApiFp)(configuration);
    return {
        /**
         * Check whether the API is operational and verify timestamps.
         * @summary Get API Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(options) {
            return localVarFp.check(options).then((request) => request(axios, basePath));
        },
    };
};
exports.ApiStatusApiFactory = ApiStatusApiFactory;
/**
 * ApiStatusApiGenerated - object-oriented interface
 * @export
 * @class ApiStatusApiGenerated
 * @extends {BaseAPI}
 */
class ApiStatusApiGenerated extends base_1.BaseAPI {
    /**
     * Check whether the API is operational and verify timestamps.
     * @summary Get API Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiStatusApiGenerated
     */
    check(options) {
        return (0, exports.ApiStatusApiFp)(this.configuration).check(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ApiStatusApiGenerated = ApiStatusApiGenerated;
