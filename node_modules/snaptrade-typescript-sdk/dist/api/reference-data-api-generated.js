"use strict";
/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferenceDataApiGenerated = exports.ReferenceDataApiFactory = exports.ReferenceDataApiFp = exports.ReferenceDataApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * ReferenceDataApi - axios parameter creator
 * @export
 */
const ReferenceDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns an Exchange Rate Pair object for the specified Currency Pair.
         * @summary Get exchange rate of a currency pair
         * @param {string} currencyPair A currency pair based on currency code for example, {CAD-USD}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyExchangeRatePair: (currencyPair, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'currencyPair' is not null or undefined
            (0, common_1.assertParamExists)('getCurrencyExchangeRatePair', 'currencyPair', currencyPair);
            const localVarPath = `/currencies/rates/{currencyPair}`
                .replace(`{${"currencyPair"}}`, encodeURIComponent(String(currencyPair !== undefined ? currencyPair : `-currencyPair-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencies/rates/{currencyPair}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
         * @summary Get Client Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnerInfo: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/snapTrade/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/partners',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return all available security types supported by SnapTrade.
         * @summary List security types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityTypes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/securityTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/securityTypes',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all supported Exchanges.
         * @summary Get exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockExchanges: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/exchanges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/exchanges',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
         * @summary Search symbols
         * @param {SymbolQuery} [symbolQuery]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbols: (symbolQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/symbols`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: symbolQuery,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/symbols',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(symbolQuery, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
         * @summary Get symbol detail
         * @param {string} query The ticker or Universal Symbol ID to look up the symbol with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbolsByTicker: (query, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'query' is not null or undefined
            (0, common_1.assertParamExists)('getSymbolsByTicker', 'query', query);
            const localVarPath = `/symbols/{query}`
                .replace(`{${"query"}}`, encodeURIComponent(String(query !== undefined ? query : `-query-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/symbols/{query}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all defined Brokerage authorization Type objects.
         * @summary Get all brokerage authorization types
         * @param {string} [brokerage] Comma separated value of brokerage slugs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageAuthorizationType: (brokerage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/brokerageAuthorizationTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (brokerage !== undefined) {
                localVarQueryParameter['brokerage'] = brokerage;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brokerageAuthorizationTypes',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
         * @summary Get brokerage instruments
         * @param {string} brokerageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageInstruments: (brokerageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'brokerageId' is not null or undefined
            (0, common_1.assertParamExists)('listAllBrokerageInstruments', 'brokerageId', brokerageId);
            const localVarPath = `/brokerages/{brokerageId}/instruments`
                .replace(`{${"brokerageId"}}`, encodeURIComponent(String(brokerageId !== undefined ? brokerageId : `-brokerageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brokerages/{brokerageId}/instruments',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all defined Brokerage objects.
         * @summary Get brokerages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerages: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/brokerages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brokerages',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all defined Currency objects.
         * @summary Get currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrencies: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencies',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all Exchange Rate Pairs for all supported Currencies.
         * @summary Get currency exchange rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrenciesRates: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/currencies/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencies/rates',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
         * @summary Search account symbols
         * @param {string} userId
         * @param {string} userSecret
         * @param {string} accountId
         * @param {SymbolQuery} [symbolQuery]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearchUserAccount: (userId, userSecret, accountId, symbolQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('symbolSearchUserAccount', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('symbolSearchUserAccount', 'userSecret', userSecret);
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('symbolSearchUserAccount', 'accountId', accountId);
            const localVarPath = `/accounts/{accountId}/symbols`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: symbolQuery,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/symbols',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(symbolQuery, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ReferenceDataApiAxiosParamCreator = ReferenceDataApiAxiosParamCreator;
/**
 * ReferenceDataApi - functional programming interface
 * @export
 */
const ReferenceDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ReferenceDataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns an Exchange Rate Pair object for the specified Currency Pair.
         * @summary Get exchange rate of a currency pair
         * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyExchangeRatePair(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCurrencyExchangeRatePair(requestParameters.currencyPair, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
         * @summary Get Client Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnerInfo(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPartnerInfo(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Return all available security types supported by SnapTrade.
         * @summary List security types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityTypes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSecurityTypes(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all supported Exchanges.
         * @summary Get exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockExchanges(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStockExchanges(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
         * @summary Search symbols
         * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbols(requestParameters = {}, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const symbolQuery = {
                    substring: requestParameters.substring
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSymbols(symbolQuery, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
         * @summary Get symbol detail
         * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbolsByTicker(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSymbolsByTicker(requestParameters.query, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all defined Brokerage authorization Type objects.
         * @summary Get all brokerage authorization types
         * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageAuthorizationType(requestParameters = {}, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAllBrokerageAuthorizationType(requestParameters.brokerage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
         * @summary Get brokerage instruments
         * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageInstruments(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAllBrokerageInstruments(requestParameters.brokerageId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all defined Brokerage objects.
         * @summary Get brokerages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerages(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAllBrokerages(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all defined Currency objects.
         * @summary Get currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrencies(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAllCurrencies(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all Exchange Rate Pairs for all supported Currencies.
         * @summary Get currency exchange rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrenciesRates(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAllCurrenciesRates(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
         * @summary Search account symbols
         * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearchUserAccount(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const symbolQuery = {
                    substring: requestParameters.substring
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.symbolSearchUserAccount(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, symbolQuery, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ReferenceDataApiFp = ReferenceDataApiFp;
/**
 * ReferenceDataApi - factory interface
 * @export
 */
const ReferenceDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ReferenceDataApiFp)(configuration);
    return {
        /**
         * Returns an Exchange Rate Pair object for the specified Currency Pair.
         * @summary Get exchange rate of a currency pair
         * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyExchangeRatePair(requestParameters, options) {
            return localVarFp.getCurrencyExchangeRatePair(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
         * @summary Get Client Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnerInfo(options) {
            return localVarFp.getPartnerInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Return all available security types supported by SnapTrade.
         * @summary List security types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityTypes(options) {
            return localVarFp.getSecurityTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all supported Exchanges.
         * @summary Get exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockExchanges(options) {
            return localVarFp.getStockExchanges(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
         * @summary Search symbols
         * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbols(requestParameters = {}, options) {
            return localVarFp.getSymbols(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
         * @summary Get symbol detail
         * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbolsByTicker(requestParameters, options) {
            return localVarFp.getSymbolsByTicker(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all defined Brokerage authorization Type objects.
         * @summary Get all brokerage authorization types
         * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageAuthorizationType(requestParameters = {}, options) {
            return localVarFp.listAllBrokerageAuthorizationType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
         * @summary Get brokerage instruments
         * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageInstruments(requestParameters, options) {
            return localVarFp.listAllBrokerageInstruments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all defined Brokerage objects.
         * @summary Get brokerages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerages(options) {
            return localVarFp.listAllBrokerages(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all defined Currency objects.
         * @summary Get currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrencies(options) {
            return localVarFp.listAllCurrencies(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all Exchange Rate Pairs for all supported Currencies.
         * @summary Get currency exchange rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrenciesRates(options) {
            return localVarFp.listAllCurrenciesRates(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
         * @summary Search account symbols
         * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearchUserAccount(requestParameters, options) {
            return localVarFp.symbolSearchUserAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ReferenceDataApiFactory = ReferenceDataApiFactory;
/**
 * ReferenceDataApiGenerated - object-oriented interface
 * @export
 * @class ReferenceDataApiGenerated
 * @extends {BaseAPI}
 */
class ReferenceDataApiGenerated extends base_1.BaseAPI {
    /**
     * Returns an Exchange Rate Pair object for the specified Currency Pair.
     * @summary Get exchange rate of a currency pair
     * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getCurrencyExchangeRatePair(requestParameters, options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).getCurrencyExchangeRatePair(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
     * @summary Get Client Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getPartnerInfo(options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).getPartnerInfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return all available security types supported by SnapTrade.
     * @summary List security types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getSecurityTypes(options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).getSecurityTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all supported Exchanges.
     * @summary Get exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getStockExchanges(options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).getStockExchanges(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
     * @summary Search symbols
     * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getSymbols(requestParameters = {}, options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).getSymbols(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
     * @summary Get symbol detail
     * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getSymbolsByTicker(requestParameters, options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).getSymbolsByTicker(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all defined Brokerage authorization Type objects.
     * @summary Get all brokerage authorization types
     * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllBrokerageAuthorizationType(requestParameters = {}, options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).listAllBrokerageAuthorizationType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
     * @summary Get brokerage instruments
     * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllBrokerageInstruments(requestParameters, options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).listAllBrokerageInstruments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all defined Brokerage objects.
     * @summary Get brokerages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllBrokerages(options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).listAllBrokerages(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all defined Currency objects.
     * @summary Get currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllCurrencies(options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).listAllCurrencies(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all Exchange Rate Pairs for all supported Currencies.
     * @summary Get currency exchange rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllCurrenciesRates(options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).listAllCurrenciesRates(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
     * @summary Search account symbols
     * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    symbolSearchUserAccount(requestParameters, options) {
        return (0, exports.ReferenceDataApiFp)(this.configuration).symbolSearchUserAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ReferenceDataApiGenerated = ReferenceDataApiGenerated;
