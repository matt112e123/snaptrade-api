import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AuthenticationLoginSnapTradeUser200Response } from '../models';
import { DeleteUserResponse } from '../models';
import { SnapTradeLoginUserRequestBody } from '../models';
import { SnapTradeRegisterUserRequestBody } from '../models';
import { UserIDandSecret } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
     * @summary Delete user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapTradeUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSnapTradeUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
     * @summary Generate Connection Portal URL
     * @param {string} userId
     * @param {string} userSecret
     * @param {SnapTradeLoginUserRequestBody} [snapTradeLoginUserRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginSnapTradeUser: (userId: string, userSecret: string, snapTradeLoginUserRequestBody?: SnapTradeLoginUserRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
     * @summary Register user
     * @param {SnapTradeRegisterUserRequestBody} snapTradeRegisterUserRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSnapTradeUser: (snapTradeRegisterUserRequestBody: SnapTradeRegisterUserRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
     * @summary Rotate user secret
     * @param {UserIDandSecret} userIDandSecret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetSnapTradeUserSecret: (userIDandSecret: UserIDandSecret, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
     * @summary Delete user
     * @param {AuthenticationApiDeleteSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapTradeUser(requestParameters: AuthenticationApiDeleteSnapTradeUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserResponse>>;
    /**
     * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSnapTradeUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
     * @summary Generate Connection Portal URL
     * @param {AuthenticationApiLoginSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginSnapTradeUser(requestParameters: AuthenticationApiLoginSnapTradeUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationLoginSnapTradeUser200Response>>;
    /**
     * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
     * @summary Register user
     * @param {AuthenticationApiRegisterSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSnapTradeUser(requestParameters: AuthenticationApiRegisterSnapTradeUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserIDandSecret>>;
    /**
     * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
     * @summary Rotate user secret
     * @param {AuthenticationApiResetSnapTradeUserSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetSnapTradeUserSecret(requestParameters: AuthenticationApiResetSnapTradeUserSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserIDandSecret>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
     * @summary Delete user
     * @param {AuthenticationApiDeleteSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSnapTradeUser(requestParameters: AuthenticationApiDeleteSnapTradeUserRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteUserResponse>;
    /**
     * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSnapTradeUsers(options?: AxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
     * @summary Generate Connection Portal URL
     * @param {AuthenticationApiLoginSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginSnapTradeUser(requestParameters: AuthenticationApiLoginSnapTradeUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthenticationLoginSnapTradeUser200Response>;
    /**
     * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
     * @summary Register user
     * @param {AuthenticationApiRegisterSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSnapTradeUser(requestParameters: AuthenticationApiRegisterSnapTradeUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserIDandSecret>;
    /**
     * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
     * @summary Rotate user secret
     * @param {AuthenticationApiResetSnapTradeUserSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetSnapTradeUserSecret(requestParameters: AuthenticationApiResetSnapTradeUserSecretRequest, options?: AxiosRequestConfig): AxiosPromise<UserIDandSecret>;
};
/**
 * Request parameters for deleteSnapTradeUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiDeleteSnapTradeUserRequest
 */
export type AuthenticationApiDeleteSnapTradeUserRequest = {
    /**
    *
    * @type {string}
    * @memberof AuthenticationApiDeleteSnapTradeUser
    */
    readonly userId: string;
};
/**
 * Request parameters for loginSnapTradeUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginSnapTradeUserRequest
 */
export type AuthenticationApiLoginSnapTradeUserRequest = {
    /**
    *
    * @type {string}
    * @memberof AuthenticationApiLoginSnapTradeUser
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof AuthenticationApiLoginSnapTradeUser
    */
    readonly userSecret: string;
} & SnapTradeLoginUserRequestBody;
/**
 * Request parameters for registerSnapTradeUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRegisterSnapTradeUserRequest
 */
export type AuthenticationApiRegisterSnapTradeUserRequest = {} & SnapTradeRegisterUserRequestBody;
/**
 * Request parameters for resetSnapTradeUserSecret operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiResetSnapTradeUserSecretRequest
 */
export type AuthenticationApiResetSnapTradeUserSecretRequest = {} & UserIDandSecret;
/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export declare class AuthenticationApiGenerated extends BaseAPI {
    /**
     * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
     * @summary Delete user
     * @param {AuthenticationApiDeleteSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    deleteSnapTradeUser(requestParameters: AuthenticationApiDeleteSnapTradeUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteUserResponse, any>>;
    /**
     * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    listSnapTradeUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes.
     * @summary Generate Connection Portal URL
     * @param {AuthenticationApiLoginSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    loginSnapTradeUser(requestParameters: AuthenticationApiLoginSnapTradeUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationLoginSnapTradeUser200Response, any>>;
    /**
     * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
     * @summary Register user
     * @param {AuthenticationApiRegisterSnapTradeUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    registerSnapTradeUser(requestParameters: AuthenticationApiRegisterSnapTradeUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserIDandSecret, any>>;
    /**
     * Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you\'ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
     * @summary Rotate user secret
     * @param {AuthenticationApiResetSnapTradeUserSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    resetSnapTradeUserSecret(requestParameters: AuthenticationApiResetSnapTradeUserSecretRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserIDandSecret, any>>;
}
