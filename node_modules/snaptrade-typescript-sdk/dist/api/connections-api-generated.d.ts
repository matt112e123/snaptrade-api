import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BrokerageAuthorization } from '../models';
import { BrokerageAuthorizationDisabledConfirmation } from '../models';
import { BrokerageAuthorizationRefreshConfirmation } from '../models';
import { ConnectionsSessionEvents200ResponseInner } from '../models';
import { RateOfReturnResponse } from '../models';
/**
 * ConnectionsApi - axios parameter creator
 * @export
 */
export declare const ConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a single connection for the specified ID.
     * @summary Get connection detail
     * @param {string} authorizationId
     * @param {string} userId
     * @param {string} userSecret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detailBrokerageAuthorization: (authorizationId: string, userId: string, userSecret: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Manually force the specified connection to become disabled. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a [`CONNECTION_BROKEN` webhook](/docs/webhooks#webhooks-connection_broken) for the connection.  This endpoint is available on test keys. If you would like it enabled on production keys as well, please contact support as it is disabled by default.
     * @summary Force disable connection
     * @param {string} authorizationId
     * @param {string} userId
     * @param {string} userSecret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableBrokerageAuthorization: (authorizationId: string, userId: string, userSecret: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all connections for the specified user. Note that `Connection` and `Brokerage Authorization` are interchangeable, but the term `Connection` is preferred and used in the doc for consistency.  A connection is usually tied to a single login at a brokerage. A single connection can contain multiple brokerage accounts.  SnapTrade performs de-duping on connections for a given user. If the user has an existing connection with the brokerage, when connecting the brokerage with the same credentials, SnapTrade will return the existing connection instead of creating a new one.
     * @summary List all connections
     * @param {string} userId
     * @param {string} userSecret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBrokerageAuthorizations: (userId: string, userSecret: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Trigger a holdings update for all accounts under this connection. Updates will be queued asynchronously. [`ACCOUNT_HOLDINGS_UPDATED` webhook](/docs/webhooks#webhooks-account_holdings_updated) will be sent once the sync completes for each account under the connection. This endpoint will also trigger a transaction sync for the past day if one has not yet occurred.  **Please contact support before use. Because of the cost of refreshing a connection, each call to this endpoint incurs a additional charge of $0.05**
     * @summary Refresh holdings for a connection
     * @param {string} authorizationId
     * @param {string} userId
     * @param {string} userSecret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshBrokerageAuthorization: (authorizationId: string, userId: string, userSecret: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the connection specified by the ID. This will also delete all accounts and holdings associated with the connection. This action is irreversible. This endpoint is synchronous, a 204 response indicates that the connection has been successfully deleted.
     * @summary Delete connection
     * @param {string} authorizationId
     * @param {string} userId
     * @param {string} userSecret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeBrokerageAuthorization: (authorizationId: string, userId: string, userSecret: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of rate of return percents for a given connection. Will include timeframes available from the brokerage, for example \"ALL\", \"1Y\", \"6M\", \"3M\", \"1M\"
     * @summary List connection rate of returns
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} authorizationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnRates: (userId: string, userSecret: string, authorizationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of session events associated with a user.
     * @summary Get all session events for a user
     * @param {string} partnerClientId
     * @param {string} [userId] Optional comma separated list of user IDs used to filter the request on specific users
     * @param {string} [sessionId] Optional comma separated list of session IDs used to filter the request on specific users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionEvents: (partnerClientId: string, userId?: string, sessionId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConnectionsApi - functional programming interface
 * @export
 */
export declare const ConnectionsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a single connection for the specified ID.
     * @summary Get connection detail
     * @param {ConnectionsApiDetailBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detailBrokerageAuthorization(requestParameters: ConnectionsApiDetailBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageAuthorization>>;
    /**
     * Manually force the specified connection to become disabled. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a [`CONNECTION_BROKEN` webhook](/docs/webhooks#webhooks-connection_broken) for the connection.  This endpoint is available on test keys. If you would like it enabled on production keys as well, please contact support as it is disabled by default.
     * @summary Force disable connection
     * @param {ConnectionsApiDisableBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableBrokerageAuthorization(requestParameters: ConnectionsApiDisableBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageAuthorizationDisabledConfirmation>>;
    /**
     * Returns a list of all connections for the specified user. Note that `Connection` and `Brokerage Authorization` are interchangeable, but the term `Connection` is preferred and used in the doc for consistency.  A connection is usually tied to a single login at a brokerage. A single connection can contain multiple brokerage accounts.  SnapTrade performs de-duping on connections for a given user. If the user has an existing connection with the brokerage, when connecting the brokerage with the same credentials, SnapTrade will return the existing connection instead of creating a new one.
     * @summary List all connections
     * @param {ConnectionsApiListBrokerageAuthorizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBrokerageAuthorizations(requestParameters: ConnectionsApiListBrokerageAuthorizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrokerageAuthorization>>>;
    /**
     * Trigger a holdings update for all accounts under this connection. Updates will be queued asynchronously. [`ACCOUNT_HOLDINGS_UPDATED` webhook](/docs/webhooks#webhooks-account_holdings_updated) will be sent once the sync completes for each account under the connection. This endpoint will also trigger a transaction sync for the past day if one has not yet occurred.  **Please contact support before use. Because of the cost of refreshing a connection, each call to this endpoint incurs a additional charge of $0.05**
     * @summary Refresh holdings for a connection
     * @param {ConnectionsApiRefreshBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshBrokerageAuthorization(requestParameters: ConnectionsApiRefreshBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageAuthorizationRefreshConfirmation>>;
    /**
     * Deletes the connection specified by the ID. This will also delete all accounts and holdings associated with the connection. This action is irreversible. This endpoint is synchronous, a 204 response indicates that the connection has been successfully deleted.
     * @summary Delete connection
     * @param {ConnectionsApiRemoveBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeBrokerageAuthorization(requestParameters: ConnectionsApiRemoveBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a list of rate of return percents for a given connection. Will include timeframes available from the brokerage, for example \"ALL\", \"1Y\", \"6M\", \"3M\", \"1M\"
     * @summary List connection rate of returns
     * @param {ConnectionsApiReturnRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnRates(requestParameters: ConnectionsApiReturnRatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RateOfReturnResponse>>;
    /**
     * Returns a list of session events associated with a user.
     * @summary Get all session events for a user
     * @param {ConnectionsApiSessionEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionEvents(requestParameters: ConnectionsApiSessionEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionsSessionEvents200ResponseInner>>>;
};
/**
 * ConnectionsApi - factory interface
 * @export
 */
export declare const ConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a single connection for the specified ID.
     * @summary Get connection detail
     * @param {ConnectionsApiDetailBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detailBrokerageAuthorization(requestParameters: ConnectionsApiDetailBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageAuthorization>;
    /**
     * Manually force the specified connection to become disabled. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a [`CONNECTION_BROKEN` webhook](/docs/webhooks#webhooks-connection_broken) for the connection.  This endpoint is available on test keys. If you would like it enabled on production keys as well, please contact support as it is disabled by default.
     * @summary Force disable connection
     * @param {ConnectionsApiDisableBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableBrokerageAuthorization(requestParameters: ConnectionsApiDisableBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageAuthorizationDisabledConfirmation>;
    /**
     * Returns a list of all connections for the specified user. Note that `Connection` and `Brokerage Authorization` are interchangeable, but the term `Connection` is preferred and used in the doc for consistency.  A connection is usually tied to a single login at a brokerage. A single connection can contain multiple brokerage accounts.  SnapTrade performs de-duping on connections for a given user. If the user has an existing connection with the brokerage, when connecting the brokerage with the same credentials, SnapTrade will return the existing connection instead of creating a new one.
     * @summary List all connections
     * @param {ConnectionsApiListBrokerageAuthorizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBrokerageAuthorizations(requestParameters: ConnectionsApiListBrokerageAuthorizationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BrokerageAuthorization>>;
    /**
     * Trigger a holdings update for all accounts under this connection. Updates will be queued asynchronously. [`ACCOUNT_HOLDINGS_UPDATED` webhook](/docs/webhooks#webhooks-account_holdings_updated) will be sent once the sync completes for each account under the connection. This endpoint will also trigger a transaction sync for the past day if one has not yet occurred.  **Please contact support before use. Because of the cost of refreshing a connection, each call to this endpoint incurs a additional charge of $0.05**
     * @summary Refresh holdings for a connection
     * @param {ConnectionsApiRefreshBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshBrokerageAuthorization(requestParameters: ConnectionsApiRefreshBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageAuthorizationRefreshConfirmation>;
    /**
     * Deletes the connection specified by the ID. This will also delete all accounts and holdings associated with the connection. This action is irreversible. This endpoint is synchronous, a 204 response indicates that the connection has been successfully deleted.
     * @summary Delete connection
     * @param {ConnectionsApiRemoveBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeBrokerageAuthorization(requestParameters: ConnectionsApiRemoveBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns a list of rate of return percents for a given connection. Will include timeframes available from the brokerage, for example \"ALL\", \"1Y\", \"6M\", \"3M\", \"1M\"
     * @summary List connection rate of returns
     * @param {ConnectionsApiReturnRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnRates(requestParameters: ConnectionsApiReturnRatesRequest, options?: AxiosRequestConfig): AxiosPromise<RateOfReturnResponse>;
    /**
     * Returns a list of session events associated with a user.
     * @summary Get all session events for a user
     * @param {ConnectionsApiSessionEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionEvents(requestParameters: ConnectionsApiSessionEventsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ConnectionsSessionEvents200ResponseInner>>;
};
/**
 * Request parameters for detailBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiDetailBrokerageAuthorizationRequest
 */
export type ConnectionsApiDetailBrokerageAuthorizationRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiDetailBrokerageAuthorization
    */
    readonly authorizationId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiDetailBrokerageAuthorization
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiDetailBrokerageAuthorization
    */
    readonly userSecret: string;
};
/**
 * Request parameters for disableBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiDisableBrokerageAuthorizationRequest
 */
export type ConnectionsApiDisableBrokerageAuthorizationRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiDisableBrokerageAuthorization
    */
    readonly authorizationId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiDisableBrokerageAuthorization
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiDisableBrokerageAuthorization
    */
    readonly userSecret: string;
};
/**
 * Request parameters for listBrokerageAuthorizations operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiListBrokerageAuthorizationsRequest
 */
export type ConnectionsApiListBrokerageAuthorizationsRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiListBrokerageAuthorizations
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiListBrokerageAuthorizations
    */
    readonly userSecret: string;
};
/**
 * Request parameters for refreshBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiRefreshBrokerageAuthorizationRequest
 */
export type ConnectionsApiRefreshBrokerageAuthorizationRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiRefreshBrokerageAuthorization
    */
    readonly authorizationId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiRefreshBrokerageAuthorization
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiRefreshBrokerageAuthorization
    */
    readonly userSecret: string;
};
/**
 * Request parameters for removeBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiRemoveBrokerageAuthorizationRequest
 */
export type ConnectionsApiRemoveBrokerageAuthorizationRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiRemoveBrokerageAuthorization
    */
    readonly authorizationId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiRemoveBrokerageAuthorization
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiRemoveBrokerageAuthorization
    */
    readonly userSecret: string;
};
/**
 * Request parameters for returnRates operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiReturnRatesRequest
 */
export type ConnectionsApiReturnRatesRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiReturnRates
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiReturnRates
    */
    readonly userSecret: string;
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiReturnRates
    */
    readonly authorizationId: string;
};
/**
 * Request parameters for sessionEvents operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiSessionEventsRequest
 */
export type ConnectionsApiSessionEventsRequest = {
    /**
    *
    * @type {string}
    * @memberof ConnectionsApiSessionEvents
    */
    readonly partnerClientId: string;
    /**
    * Optional comma separated list of user IDs used to filter the request on specific users
    * @type {string}
    * @memberof ConnectionsApiSessionEvents
    */
    readonly userId?: string;
    /**
    * Optional comma separated list of session IDs used to filter the request on specific users
    * @type {string}
    * @memberof ConnectionsApiSessionEvents
    */
    readonly sessionId?: string;
};
/**
 * ConnectionsApiGenerated - object-oriented interface
 * @export
 * @class ConnectionsApiGenerated
 * @extends {BaseAPI}
 */
export declare class ConnectionsApiGenerated extends BaseAPI {
    /**
     * Returns a single connection for the specified ID.
     * @summary Get connection detail
     * @param {ConnectionsApiDetailBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    detailBrokerageAuthorization(requestParameters: ConnectionsApiDetailBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrokerageAuthorization, any>>;
    /**
     * Manually force the specified connection to become disabled. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a [`CONNECTION_BROKEN` webhook](/docs/webhooks#webhooks-connection_broken) for the connection.  This endpoint is available on test keys. If you would like it enabled on production keys as well, please contact support as it is disabled by default.
     * @summary Force disable connection
     * @param {ConnectionsApiDisableBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    disableBrokerageAuthorization(requestParameters: ConnectionsApiDisableBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrokerageAuthorizationDisabledConfirmation, any>>;
    /**
     * Returns a list of all connections for the specified user. Note that `Connection` and `Brokerage Authorization` are interchangeable, but the term `Connection` is preferred and used in the doc for consistency.  A connection is usually tied to a single login at a brokerage. A single connection can contain multiple brokerage accounts.  SnapTrade performs de-duping on connections for a given user. If the user has an existing connection with the brokerage, when connecting the brokerage with the same credentials, SnapTrade will return the existing connection instead of creating a new one.
     * @summary List all connections
     * @param {ConnectionsApiListBrokerageAuthorizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    listBrokerageAuthorizations(requestParameters: ConnectionsApiListBrokerageAuthorizationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrokerageAuthorization[], any>>;
    /**
     * Trigger a holdings update for all accounts under this connection. Updates will be queued asynchronously. [`ACCOUNT_HOLDINGS_UPDATED` webhook](/docs/webhooks#webhooks-account_holdings_updated) will be sent once the sync completes for each account under the connection. This endpoint will also trigger a transaction sync for the past day if one has not yet occurred.  **Please contact support before use. Because of the cost of refreshing a connection, each call to this endpoint incurs a additional charge of $0.05**
     * @summary Refresh holdings for a connection
     * @param {ConnectionsApiRefreshBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    refreshBrokerageAuthorization(requestParameters: ConnectionsApiRefreshBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrokerageAuthorizationRefreshConfirmation, any>>;
    /**
     * Deletes the connection specified by the ID. This will also delete all accounts and holdings associated with the connection. This action is irreversible. This endpoint is synchronous, a 204 response indicates that the connection has been successfully deleted.
     * @summary Delete connection
     * @param {ConnectionsApiRemoveBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    removeBrokerageAuthorization(requestParameters: ConnectionsApiRemoveBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a list of rate of return percents for a given connection. Will include timeframes available from the brokerage, for example \"ALL\", \"1Y\", \"6M\", \"3M\", \"1M\"
     * @summary List connection rate of returns
     * @param {ConnectionsApiReturnRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    returnRates(requestParameters: ConnectionsApiReturnRatesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RateOfReturnResponse, any>>;
    /**
     * Returns a list of session events associated with a user.
     * @summary Get all session events for a user
     * @param {ConnectionsApiSessionEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    sessionEvents(requestParameters: ConnectionsApiSessionEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../models").SessionEvent[], any>>;
}
