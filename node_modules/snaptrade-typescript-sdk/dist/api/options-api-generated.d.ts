import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { OptionChainInner } from '../models';
import { OptionsGetOptionStrategyRequest } from '../models';
import { OptionsPlaceOptionStrategyRequest } from '../models';
import { OptionsPosition } from '../models';
import { StrategyOrderRecord } from '../models';
import { StrategyQuotes } from '../models';
/**
 * OptionsApi - axios parameter creator
 * @export
 */
export declare const OptionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates an option strategy object that will be used to place an option strategy order.
     * @summary Create options strategy
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} accountId The ID of the account to create the option strategy object in.
     * @param {OptionsGetOptionStrategyRequest} optionsGetOptionStrategyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionStrategy: (userId: string, userSecret: string, accountId: string, optionsGetOptionStrategyRequest: OptionsGetOptionStrategyRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the option chain for the specified symbol in the specified account.
     * @summary Get the options chain for a symbol
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} accountId The ID of the account to get the options chain from.
     * @param {string} symbol Universal symbol ID if symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionsChain: (userId: string, userSecret: string, accountId: string, symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
     * @summary Get options strategy quotes
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} accountId The ID of the account the strategy will be placed in.
     * @param {string} optionStrategyId Option strategy id obtained from response when creating option strategy object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionsStrategyQuote: (userId: string, userSecret: string, accountId: string, optionStrategyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
     * @summary List account option positions
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOptionHoldings: (userId: string, userSecret: string, accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Places the option strategy order and returns the order record received from the brokerage.
     * @summary Place an option strategy order
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} accountId The ID of the account to execute the strategy in.
     * @param {string} optionStrategyId Option strategy id obtained from response when creating option strategy object
     * @param {OptionsPlaceOptionStrategyRequest} optionsPlaceOptionStrategyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    placeOptionStrategy: (userId: string, userSecret: string, accountId: string, optionStrategyId: string, optionsPlaceOptionStrategyRequest: OptionsPlaceOptionStrategyRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OptionsApi - functional programming interface
 * @export
 */
export declare const OptionsApiFp: (configuration?: Configuration) => {
    /**
     * Creates an option strategy object that will be used to place an option strategy order.
     * @summary Create options strategy
     * @param {OptionsApiGetOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionStrategy(requestParameters: OptionsApiGetOptionStrategyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategyQuotes>>;
    /**
     * Returns the option chain for the specified symbol in the specified account.
     * @summary Get the options chain for a symbol
     * @param {OptionsApiGetOptionsChainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionsChain(requestParameters: OptionsApiGetOptionsChainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionChainInner>>>;
    /**
     * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
     * @summary Get options strategy quotes
     * @param {OptionsApiGetOptionsStrategyQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionsStrategyQuote(requestParameters: OptionsApiGetOptionsStrategyQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategyQuotes>>;
    /**
     * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
     * @summary List account option positions
     * @param {OptionsApiListOptionHoldingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOptionHoldings(requestParameters: OptionsApiListOptionHoldingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptionsPosition>>>;
    /**
     * Places the option strategy order and returns the order record received from the brokerage.
     * @summary Place an option strategy order
     * @param {OptionsApiPlaceOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    placeOptionStrategy(requestParameters: OptionsApiPlaceOptionStrategyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategyOrderRecord>>;
};
/**
 * OptionsApi - factory interface
 * @export
 */
export declare const OptionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates an option strategy object that will be used to place an option strategy order.
     * @summary Create options strategy
     * @param {OptionsApiGetOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionStrategy(requestParameters: OptionsApiGetOptionStrategyRequest, options?: AxiosRequestConfig): AxiosPromise<StrategyQuotes>;
    /**
     * Returns the option chain for the specified symbol in the specified account.
     * @summary Get the options chain for a symbol
     * @param {OptionsApiGetOptionsChainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionsChain(requestParameters: OptionsApiGetOptionsChainRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OptionChainInner>>;
    /**
     * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
     * @summary Get options strategy quotes
     * @param {OptionsApiGetOptionsStrategyQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOptionsStrategyQuote(requestParameters: OptionsApiGetOptionsStrategyQuoteRequest, options?: AxiosRequestConfig): AxiosPromise<StrategyQuotes>;
    /**
     * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
     * @summary List account option positions
     * @param {OptionsApiListOptionHoldingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOptionHoldings(requestParameters: OptionsApiListOptionHoldingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OptionsPosition>>;
    /**
     * Places the option strategy order and returns the order record received from the brokerage.
     * @summary Place an option strategy order
     * @param {OptionsApiPlaceOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    placeOptionStrategy(requestParameters: OptionsApiPlaceOptionStrategyRequest, options?: AxiosRequestConfig): AxiosPromise<StrategyOrderRecord>;
};
/**
 * Request parameters for getOptionStrategy operation in OptionsApi.
 * @export
 * @interface OptionsApiGetOptionStrategyRequest
 */
export type OptionsApiGetOptionStrategyRequest = {
    /**
    *
    * @type {string}
    * @memberof OptionsApiGetOptionStrategy
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof OptionsApiGetOptionStrategy
    */
    readonly userSecret: string;
    /**
    * The ID of the account to create the option strategy object in.
    * @type {string}
    * @memberof OptionsApiGetOptionStrategy
    */
    readonly accountId: string;
} & OptionsGetOptionStrategyRequest;
/**
 * Request parameters for getOptionsChain operation in OptionsApi.
 * @export
 * @interface OptionsApiGetOptionsChainRequest
 */
export type OptionsApiGetOptionsChainRequest = {
    /**
    *
    * @type {string}
    * @memberof OptionsApiGetOptionsChain
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof OptionsApiGetOptionsChain
    */
    readonly userSecret: string;
    /**
    * The ID of the account to get the options chain from.
    * @type {string}
    * @memberof OptionsApiGetOptionsChain
    */
    readonly accountId: string;
    /**
    * Universal symbol ID if symbol
    * @type {string}
    * @memberof OptionsApiGetOptionsChain
    */
    readonly symbol: string;
};
/**
 * Request parameters for getOptionsStrategyQuote operation in OptionsApi.
 * @export
 * @interface OptionsApiGetOptionsStrategyQuoteRequest
 */
export type OptionsApiGetOptionsStrategyQuoteRequest = {
    /**
    *
    * @type {string}
    * @memberof OptionsApiGetOptionsStrategyQuote
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof OptionsApiGetOptionsStrategyQuote
    */
    readonly userSecret: string;
    /**
    * The ID of the account the strategy will be placed in.
    * @type {string}
    * @memberof OptionsApiGetOptionsStrategyQuote
    */
    readonly accountId: string;
    /**
    * Option strategy id obtained from response when creating option strategy object
    * @type {string}
    * @memberof OptionsApiGetOptionsStrategyQuote
    */
    readonly optionStrategyId: string;
};
/**
 * Request parameters for listOptionHoldings operation in OptionsApi.
 * @export
 * @interface OptionsApiListOptionHoldingsRequest
 */
export type OptionsApiListOptionHoldingsRequest = {
    /**
    *
    * @type {string}
    * @memberof OptionsApiListOptionHoldings
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof OptionsApiListOptionHoldings
    */
    readonly userSecret: string;
    /**
    *
    * @type {string}
    * @memberof OptionsApiListOptionHoldings
    */
    readonly accountId: string;
};
/**
 * Request parameters for placeOptionStrategy operation in OptionsApi.
 * @export
 * @interface OptionsApiPlaceOptionStrategyRequest
 */
export type OptionsApiPlaceOptionStrategyRequest = {
    /**
    *
    * @type {string}
    * @memberof OptionsApiPlaceOptionStrategy
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof OptionsApiPlaceOptionStrategy
    */
    readonly userSecret: string;
    /**
    * The ID of the account to execute the strategy in.
    * @type {string}
    * @memberof OptionsApiPlaceOptionStrategy
    */
    readonly accountId: string;
    /**
    * Option strategy id obtained from response when creating option strategy object
    * @type {string}
    * @memberof OptionsApiPlaceOptionStrategy
    */
    readonly optionStrategyId: string;
} & OptionsPlaceOptionStrategyRequest;
/**
 * OptionsApiGenerated - object-oriented interface
 * @export
 * @class OptionsApiGenerated
 * @extends {BaseAPI}
 */
export declare class OptionsApiGenerated extends BaseAPI {
    /**
     * Creates an option strategy object that will be used to place an option strategy order.
     * @summary Create options strategy
     * @param {OptionsApiGetOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    getOptionStrategy(requestParameters: OptionsApiGetOptionStrategyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StrategyQuotes, any>>;
    /**
     * Returns the option chain for the specified symbol in the specified account.
     * @summary Get the options chain for a symbol
     * @param {OptionsApiGetOptionsChainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    getOptionsChain(requestParameters: OptionsApiGetOptionsChainRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OptionChainInner[], any>>;
    /**
     * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
     * @summary Get options strategy quotes
     * @param {OptionsApiGetOptionsStrategyQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    getOptionsStrategyQuote(requestParameters: OptionsApiGetOptionsStrategyQuoteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StrategyQuotes, any>>;
    /**
     * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
     * @summary List account option positions
     * @param {OptionsApiListOptionHoldingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    listOptionHoldings(requestParameters: OptionsApiListOptionHoldingsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OptionsPosition[], any>>;
    /**
     * Places the option strategy order and returns the order record received from the brokerage.
     * @summary Place an option strategy order
     * @param {OptionsApiPlaceOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    placeOptionStrategy(requestParameters: OptionsApiPlaceOptionStrategyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StrategyOrderRecord, any>>;
}
