import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Brokerage } from '../models';
import { BrokerageAuthorizationTypeReadOnly } from '../models';
import { BrokerageInstrumentsResponse } from '../models';
import { Currency } from '../models';
import { Exchange } from '../models';
import { ExchangeRatePairs } from '../models';
import { PartnerData } from '../models';
import { SecurityType } from '../models';
import { SymbolQuery } from '../models';
import { UniversalSymbol } from '../models';
/**
 * ReferenceDataApi - axios parameter creator
 * @export
 */
export declare const ReferenceDataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns an Exchange Rate Pair object for the specified Currency Pair.
     * @summary Get exchange rate of a currency pair
     * @param {string} currencyPair A currency pair based on currency code for example, {CAD-USD}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyExchangeRatePair: (currencyPair: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
     * @summary Get Client Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartnerInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return all available security types supported by SnapTrade.
     * @summary List security types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSecurityTypes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all supported Exchanges.
     * @summary Get exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStockExchanges: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
     * @summary Search symbols
     * @param {SymbolQuery} [symbolQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSymbols: (symbolQuery?: SymbolQuery, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
     * @summary Get symbol detail
     * @param {string} query The ticker or Universal Symbol ID to look up the symbol with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSymbolsByTicker: (query: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all defined Brokerage authorization Type objects.
     * @summary Get all brokerage authorization types
     * @param {string} [brokerage] Comma separated value of brokerage slugs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerageAuthorizationType: (brokerage?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
     * @summary Get brokerage instruments
     * @param {string} brokerageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerageInstruments: (brokerageId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all defined Brokerage objects.
     * @summary Get brokerages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerages: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all defined Currency objects.
     * @summary Get currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllCurrencies: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all Exchange Rate Pairs for all supported Currencies.
     * @summary Get currency exchange rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllCurrenciesRates: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
     * @summary Search account symbols
     * @param {string} userId
     * @param {string} userSecret
     * @param {string} accountId
     * @param {SymbolQuery} [symbolQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbolSearchUserAccount: (userId: string, userSecret: string, accountId: string, symbolQuery?: SymbolQuery, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReferenceDataApi - functional programming interface
 * @export
 */
export declare const ReferenceDataApiFp: (configuration?: Configuration) => {
    /**
     * Returns an Exchange Rate Pair object for the specified Currency Pair.
     * @summary Get exchange rate of a currency pair
     * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyExchangeRatePair(requestParameters: ReferenceDataApiGetCurrencyExchangeRatePairRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRatePairs>>;
    /**
     * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
     * @summary Get Client Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartnerInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerData>>;
    /**
     * Return all available security types supported by SnapTrade.
     * @summary List security types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSecurityTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecurityType>>>;
    /**
     * Returns a list of all supported Exchanges.
     * @summary Get exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStockExchanges(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exchange>>>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
     * @summary Search symbols
     * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSymbols(requestParameters?: ReferenceDataApiGetSymbolsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UniversalSymbol>>>;
    /**
     * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
     * @summary Get symbol detail
     * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSymbolsByTicker(requestParameters: ReferenceDataApiGetSymbolsByTickerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversalSymbol>>;
    /**
     * Returns a list of all defined Brokerage authorization Type objects.
     * @summary Get all brokerage authorization types
     * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerageAuthorizationType(requestParameters?: ReferenceDataApiListAllBrokerageAuthorizationTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrokerageAuthorizationTypeReadOnly>>>;
    /**
     * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
     * @summary Get brokerage instruments
     * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerageInstruments(requestParameters: ReferenceDataApiListAllBrokerageInstrumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageInstrumentsResponse>>;
    /**
     * Returns a list of all defined Brokerage objects.
     * @summary Get brokerages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Brokerage>>>;
    /**
     * Returns a list of all defined Currency objects.
     * @summary Get currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllCurrencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Currency>>>;
    /**
     * Returns a list of all Exchange Rate Pairs for all supported Currencies.
     * @summary Get currency exchange rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllCurrenciesRates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExchangeRatePairs>>>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
     * @summary Search account symbols
     * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbolSearchUserAccount(requestParameters: ReferenceDataApiSymbolSearchUserAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UniversalSymbol>>>;
};
/**
 * ReferenceDataApi - factory interface
 * @export
 */
export declare const ReferenceDataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns an Exchange Rate Pair object for the specified Currency Pair.
     * @summary Get exchange rate of a currency pair
     * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrencyExchangeRatePair(requestParameters: ReferenceDataApiGetCurrencyExchangeRatePairRequest, options?: AxiosRequestConfig): AxiosPromise<ExchangeRatePairs>;
    /**
     * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
     * @summary Get Client Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartnerInfo(options?: AxiosRequestConfig): AxiosPromise<PartnerData>;
    /**
     * Return all available security types supported by SnapTrade.
     * @summary List security types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSecurityTypes(options?: AxiosRequestConfig): AxiosPromise<Array<SecurityType>>;
    /**
     * Returns a list of all supported Exchanges.
     * @summary Get exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStockExchanges(options?: AxiosRequestConfig): AxiosPromise<Array<Exchange>>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
     * @summary Search symbols
     * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSymbols(requestParameters?: ReferenceDataApiGetSymbolsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UniversalSymbol>>;
    /**
     * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
     * @summary Get symbol detail
     * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSymbolsByTicker(requestParameters: ReferenceDataApiGetSymbolsByTickerRequest, options?: AxiosRequestConfig): AxiosPromise<UniversalSymbol>;
    /**
     * Returns a list of all defined Brokerage authorization Type objects.
     * @summary Get all brokerage authorization types
     * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerageAuthorizationType(requestParameters?: ReferenceDataApiListAllBrokerageAuthorizationTypeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BrokerageAuthorizationTypeReadOnly>>;
    /**
     * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
     * @summary Get brokerage instruments
     * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerageInstruments(requestParameters: ReferenceDataApiListAllBrokerageInstrumentsRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageInstrumentsResponse>;
    /**
     * Returns a list of all defined Brokerage objects.
     * @summary Get brokerages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllBrokerages(options?: AxiosRequestConfig): AxiosPromise<Array<Brokerage>>;
    /**
     * Returns a list of all defined Currency objects.
     * @summary Get currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllCurrencies(options?: AxiosRequestConfig): AxiosPromise<Array<Currency>>;
    /**
     * Returns a list of all Exchange Rate Pairs for all supported Currencies.
     * @summary Get currency exchange rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllCurrenciesRates(options?: AxiosRequestConfig): AxiosPromise<Array<ExchangeRatePairs>>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
     * @summary Search account symbols
     * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbolSearchUserAccount(requestParameters: ReferenceDataApiSymbolSearchUserAccountRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UniversalSymbol>>;
};
/**
 * Request parameters for getCurrencyExchangeRatePair operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetCurrencyExchangeRatePairRequest
 */
export type ReferenceDataApiGetCurrencyExchangeRatePairRequest = {
    /**
    * A currency pair based on currency code for example, {CAD-USD}
    * @type {string}
    * @memberof ReferenceDataApiGetCurrencyExchangeRatePair
    */
    readonly currencyPair: string;
};
/**
 * Request parameters for getSymbols operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetSymbolsRequest
 */
export type ReferenceDataApiGetSymbolsRequest = {} & SymbolQuery;
/**
 * Request parameters for getSymbolsByTicker operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetSymbolsByTickerRequest
 */
export type ReferenceDataApiGetSymbolsByTickerRequest = {
    /**
    * The ticker or Universal Symbol ID to look up the symbol with.
    * @type {string}
    * @memberof ReferenceDataApiGetSymbolsByTicker
    */
    readonly query: string;
};
/**
 * Request parameters for listAllBrokerageAuthorizationType operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiListAllBrokerageAuthorizationTypeRequest
 */
export type ReferenceDataApiListAllBrokerageAuthorizationTypeRequest = {
    /**
    * Comma separated value of brokerage slugs
    * @type {string}
    * @memberof ReferenceDataApiListAllBrokerageAuthorizationType
    */
    readonly brokerage?: string;
};
/**
 * Request parameters for listAllBrokerageInstruments operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiListAllBrokerageInstrumentsRequest
 */
export type ReferenceDataApiListAllBrokerageInstrumentsRequest = {
    /**
    *
    * @type {string}
    * @memberof ReferenceDataApiListAllBrokerageInstruments
    */
    readonly brokerageId: string;
};
/**
 * Request parameters for symbolSearchUserAccount operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiSymbolSearchUserAccountRequest
 */
export type ReferenceDataApiSymbolSearchUserAccountRequest = {
    /**
    *
    * @type {string}
    * @memberof ReferenceDataApiSymbolSearchUserAccount
    */
    readonly userId: string;
    /**
    *
    * @type {string}
    * @memberof ReferenceDataApiSymbolSearchUserAccount
    */
    readonly userSecret: string;
    /**
    *
    * @type {string}
    * @memberof ReferenceDataApiSymbolSearchUserAccount
    */
    readonly accountId: string;
} & SymbolQuery;
/**
 * ReferenceDataApiGenerated - object-oriented interface
 * @export
 * @class ReferenceDataApiGenerated
 * @extends {BaseAPI}
 */
export declare class ReferenceDataApiGenerated extends BaseAPI {
    /**
     * Returns an Exchange Rate Pair object for the specified Currency Pair.
     * @summary Get exchange rate of a currency pair
     * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getCurrencyExchangeRatePair(requestParameters: ReferenceDataApiGetCurrencyExchangeRatePairRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExchangeRatePairs, any>>;
    /**
     * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
     * @summary Get Client Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getPartnerInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PartnerData, any>>;
    /**
     * Return all available security types supported by SnapTrade.
     * @summary List security types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getSecurityTypes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SecurityType[], any>>;
    /**
     * Returns a list of all supported Exchanges.
     * @summary Get exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getStockExchanges(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exchange[], any>>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
     * @summary Search symbols
     * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getSymbols(requestParameters?: ReferenceDataApiGetSymbolsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UniversalSymbol[], any>>;
    /**
     * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
     * @summary Get symbol detail
     * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    getSymbolsByTicker(requestParameters: ReferenceDataApiGetSymbolsByTickerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UniversalSymbol, any>>;
    /**
     * Returns a list of all defined Brokerage authorization Type objects.
     * @summary Get all brokerage authorization types
     * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllBrokerageAuthorizationType(requestParameters?: ReferenceDataApiListAllBrokerageAuthorizationTypeRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrokerageAuthorizationTypeReadOnly[], any>>;
    /**
     * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
     * @summary Get brokerage instruments
     * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllBrokerageInstruments(requestParameters: ReferenceDataApiListAllBrokerageInstrumentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrokerageInstrumentsResponse, any>>;
    /**
     * Returns a list of all defined Brokerage objects.
     * @summary Get brokerages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllBrokerages(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Brokerage[], any>>;
    /**
     * Returns a list of all defined Currency objects.
     * @summary Get currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllCurrencies(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Currency[], any>>;
    /**
     * Returns a list of all Exchange Rate Pairs for all supported Currencies.
     * @summary Get currency exchange rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    listAllCurrenciesRates(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExchangeRatePairs[], any>>;
    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under.
     * @summary Search account symbols
     * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    symbolSearchUserAccount(requestParameters: ReferenceDataApiSymbolSearchUserAccountRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UniversalSymbol[], any>>;
}
