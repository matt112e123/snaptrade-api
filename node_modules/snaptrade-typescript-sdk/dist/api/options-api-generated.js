"use strict";
/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsApiGenerated = exports.OptionsApiFactory = exports.OptionsApiFp = exports.OptionsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
const requestBeforeHook_1 = require("../requestBeforeHook");
/**
 * OptionsApi - axios parameter creator
 * @export
 */
const OptionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates an option strategy object that will be used to place an option strategy order.
         * @summary Create options strategy
         * @param {string} userId
         * @param {string} userSecret
         * @param {string} accountId The ID of the account to create the option strategy object in.
         * @param {OptionsGetOptionStrategyRequest} optionsGetOptionStrategyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionStrategy: (userId, userSecret, accountId, optionsGetOptionStrategyRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionStrategy', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('getOptionStrategy', 'userSecret', userSecret);
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionStrategy', 'accountId', accountId);
            // verify required parameter 'optionsGetOptionStrategyRequest' is not null or undefined
            (0, common_1.assertParamExists)('getOptionStrategy', 'optionsGetOptionStrategyRequest', optionsGetOptionStrategyRequest);
            const localVarPath = `/accounts/{accountId}/optionStrategy`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: optionsGetOptionStrategyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/optionStrategy',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(optionsGetOptionStrategyRequest, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the option chain for the specified symbol in the specified account.
         * @summary Get the options chain for a symbol
         * @param {string} userId
         * @param {string} userSecret
         * @param {string} accountId The ID of the account to get the options chain from.
         * @param {string} symbol Universal symbol ID if symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsChain: (userId, userSecret, accountId, symbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsChain', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsChain', 'userSecret', userSecret);
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsChain', 'accountId', accountId);
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsChain', 'symbol', symbol);
            const localVarPath = `/accounts/{accountId}/optionsChain`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/optionsChain',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
         * @summary Get options strategy quotes
         * @param {string} userId
         * @param {string} userSecret
         * @param {string} accountId The ID of the account the strategy will be placed in.
         * @param {string} optionStrategyId Option strategy id obtained from response when creating option strategy object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsStrategyQuote: (userId, userSecret, accountId, optionStrategyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsStrategyQuote', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsStrategyQuote', 'userSecret', userSecret);
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsStrategyQuote', 'accountId', accountId);
            // verify required parameter 'optionStrategyId' is not null or undefined
            (0, common_1.assertParamExists)('getOptionsStrategyQuote', 'optionStrategyId', optionStrategyId);
            const localVarPath = `/accounts/{accountId}/optionStrategy/{optionStrategyId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)))
                .replace(`{${"optionStrategyId"}}`, encodeURIComponent(String(optionStrategyId !== undefined ? optionStrategyId : `-optionStrategyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/optionStrategy/{optionStrategyId}',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
         * @summary List account option positions
         * @param {string} userId
         * @param {string} userSecret
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptionHoldings: (userId, userSecret, accountId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('listOptionHoldings', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('listOptionHoldings', 'userSecret', userSecret);
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('listOptionHoldings', 'accountId', accountId);
            const localVarPath = `/accounts/{accountId}/options`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/options',
                httpMethod: 'GET'
            });
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Places the option strategy order and returns the order record received from the brokerage.
         * @summary Place an option strategy order
         * @param {string} userId
         * @param {string} userSecret
         * @param {string} accountId The ID of the account to execute the strategy in.
         * @param {string} optionStrategyId Option strategy id obtained from response when creating option strategy object
         * @param {OptionsPlaceOptionStrategyRequest} optionsPlaceOptionStrategyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOptionStrategy: (userId, userSecret, accountId, optionStrategyId, optionsPlaceOptionStrategyRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('placeOptionStrategy', 'userId', userId);
            // verify required parameter 'userSecret' is not null or undefined
            (0, common_1.assertParamExists)('placeOptionStrategy', 'userSecret', userSecret);
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('placeOptionStrategy', 'accountId', accountId);
            // verify required parameter 'optionStrategyId' is not null or undefined
            (0, common_1.assertParamExists)('placeOptionStrategy', 'optionStrategyId', optionStrategyId);
            // verify required parameter 'optionsPlaceOptionStrategyRequest' is not null or undefined
            (0, common_1.assertParamExists)('placeOptionStrategy', 'optionsPlaceOptionStrategyRequest', optionsPlaceOptionStrategyRequest);
            const localVarPath = `/accounts/{accountId}/optionStrategy/{optionStrategyId}/execute`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)))
                .replace(`{${"optionStrategyId"}}`, encodeURIComponent(String(optionStrategyId !== undefined ? optionStrategyId : `-optionStrategyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = configuration && !(0, common_1.isBrowser)() ? { "User-Agent": configuration.userAgent } : {};
            const localVarQueryParameter = {};
            // authentication PartnerClientId required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration });
            // authentication PartnerSignature required
            yield (0, common_1.setApiKeyToObject)({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration });
            // authentication PartnerTimestamp required
            yield (0, common_1.setApiKeyToObject)({ object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration });
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            (0, requestBeforeHook_1.requestBeforeHook)({
                requestBody: optionsPlaceOptionStrategyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/optionStrategy/{optionStrategyId}/execute',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(optionsPlaceOptionStrategyRequest, localVarRequestOptions, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.OptionsApiAxiosParamCreator = OptionsApiAxiosParamCreator;
/**
 * OptionsApi - functional programming interface
 * @export
 */
const OptionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OptionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates an option strategy object that will be used to place an option strategy order.
         * @summary Create options strategy
         * @param {OptionsApiGetOptionStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionStrategy(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const optionsGetOptionStrategyRequest = {
                    underlying_symbol_id: requestParameters.underlying_symbol_id,
                    legs: requestParameters.legs,
                    strategy_type: requestParameters.strategy_type
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOptionStrategy(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, optionsGetOptionStrategyRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the option chain for the specified symbol in the specified account.
         * @summary Get the options chain for a symbol
         * @param {OptionsApiGetOptionsChainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsChain(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOptionsChain(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, requestParameters.symbol, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
         * @summary Get options strategy quotes
         * @param {OptionsApiGetOptionsStrategyQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsStrategyQuote(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOptionsStrategyQuote(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, requestParameters.optionStrategyId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
         * @summary List account option positions
         * @param {OptionsApiListOptionHoldingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptionHoldings(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listOptionHoldings(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Places the option strategy order and returns the order record received from the brokerage.
         * @summary Place an option strategy order
         * @param {OptionsApiPlaceOptionStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOptionStrategy(requestParameters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const optionsPlaceOptionStrategyRequest = {
                    order_type: requestParameters.order_type,
                    time_in_force: requestParameters.time_in_force,
                    price: requestParameters.price
                };
                const localVarAxiosArgs = yield localVarAxiosParamCreator.placeOptionStrategy(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, requestParameters.optionStrategyId, optionsPlaceOptionStrategyRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.OptionsApiFp = OptionsApiFp;
/**
 * OptionsApi - factory interface
 * @export
 */
const OptionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OptionsApiFp)(configuration);
    return {
        /**
         * Creates an option strategy object that will be used to place an option strategy order.
         * @summary Create options strategy
         * @param {OptionsApiGetOptionStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionStrategy(requestParameters, options) {
            return localVarFp.getOptionStrategy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the option chain for the specified symbol in the specified account.
         * @summary Get the options chain for a symbol
         * @param {OptionsApiGetOptionsChainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsChain(requestParameters, options) {
            return localVarFp.getOptionsChain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
         * @summary Get options strategy quotes
         * @param {OptionsApiGetOptionsStrategyQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsStrategyQuote(requestParameters, options) {
            return localVarFp.getOptionsStrategyQuote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
         * @summary List account option positions
         * @param {OptionsApiListOptionHoldingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptionHoldings(requestParameters, options) {
            return localVarFp.listOptionHoldings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Places the option strategy order and returns the order record received from the brokerage.
         * @summary Place an option strategy order
         * @param {OptionsApiPlaceOptionStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOptionStrategy(requestParameters, options) {
            return localVarFp.placeOptionStrategy(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};
exports.OptionsApiFactory = OptionsApiFactory;
/**
 * OptionsApiGenerated - object-oriented interface
 * @export
 * @class OptionsApiGenerated
 * @extends {BaseAPI}
 */
class OptionsApiGenerated extends base_1.BaseAPI {
    /**
     * Creates an option strategy object that will be used to place an option strategy order.
     * @summary Create options strategy
     * @param {OptionsApiGetOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    getOptionStrategy(requestParameters, options) {
        return (0, exports.OptionsApiFp)(this.configuration).getOptionStrategy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the option chain for the specified symbol in the specified account.
     * @summary Get the options chain for a symbol
     * @param {OptionsApiGetOptionsChainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    getOptionsChain(requestParameters, options) {
        return (0, exports.OptionsApiFp)(this.configuration).getOptionsChain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a Strategy Quotes object which has latest market data of the specified option strategy.
     * @summary Get options strategy quotes
     * @param {OptionsApiGetOptionsStrategyQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    getOptionsStrategyQuote(requestParameters, options) {
        return (0, exports.OptionsApiFp)(this.configuration).getOptionsStrategyQuote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for \"Cache Expiry Time\" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
     * @summary List account option positions
     * @param {OptionsApiListOptionHoldingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    listOptionHoldings(requestParameters, options) {
        return (0, exports.OptionsApiFp)(this.configuration).listOptionHoldings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Places the option strategy order and returns the order record received from the brokerage.
     * @summary Place an option strategy order
     * @param {OptionsApiPlaceOptionStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiGenerated
     */
    placeOptionStrategy(requestParameters, options) {
        return (0, exports.OptionsApiFp)(this.configuration).placeOptionStrategy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OptionsApiGenerated = OptionsApiGenerated;
